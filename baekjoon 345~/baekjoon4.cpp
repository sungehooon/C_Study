/*문제
어린 왕자는 소혹성 B-664에서 자신이 사랑하는 한 송이 장미를 위해 살아간다.
어느 날 장미가 위험에 빠지게 된 것을 알게 된 어린 왕자는, 장미를 구하기 위해 은하수를 따라 긴 여행을 하기 시작했다.
하지만 어린 왕자의 우주선은 그렇게 좋지 않아서 행성계 간의 이동을 최대한 피해서 여행해야 한다.
아래의 그림은 어린 왕자가 펼쳐본 은하수 지도의 일부이다.
빨간 실선은 어린 왕자가 출발점에서 도착점까지 도달하는데 있어서 필요한 행성계 
진입/이탈 횟수를 최소화하는 경로이며, 원은 행성계의 경계를 의미한다. 
이러한 경로는 여러 개 존재할 수 있지만 적어도 3번의 행성계 진입/이탈이 필요하다는 것을 알 수 있다.

위와 같은 은하수 지도, 출발점, 도착점이 주어졌을 때 어린 왕자에게 필요한 최소의 행성계 진입/이탈 횟수를 구하는 프로그램을 작성해 보자.
행성계의 경계가 맞닿거나 서로 교차하는 경우는 없다. 또한, 출발점이나 도착점이 행성계 경계에 걸쳐진 경우 역시 입력으로 주어지지 않는다

입력
입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다. 
그 다음 줄부터 각각의 테스트케이스에 대해 첫째 줄에 출발점 (x1, y1)과 도착점 (x2, y2)이 주어진다.
두 번째 줄에는 행성계의 개수 n이 주어지며, 세 번째 줄부터 n줄에 걸쳐 행성계의 중점과 반지름 (cx, cy, r)이 주어진다.

출력
각 테스트 케이스에 대해 어린 왕자가 거쳐야 할 최소의 행성계 진입/이탈 횟수를 출력한다

제한
-1000 ≤ x1, y1, x2, y2, cx, cy ≤ 1000
1 ≤ r ≤ 1000
1 ≤ n ≤ 50
좌표와 반지름은 모두 정수

풀이법
필요한 최소의 행성계 진입/이탈 횟수를 구하는 프로그램.

1) 진입과, 이탈을 최소로 해야하며, 진입/이탈을 최소화할 수 있는 루트는 묻지않았다.
-> 즉, 진입과 이탈을 하는 횟수만 계산하면됨.

2) 진입/이탈을 하는 조건은 시작점->도착점을 지나면서 원을 몇개의 원을 이탈(시작점기준) 몇개의 원을 진입(도착점기준)이다.
-> 다시 말하자면 시작점에서 도착점으로 갈때 반드시 거쳐야하는 원은 몇개인가, 시작점과 도착점이 몇개의 원에 둘러쌓여있는것인가?를 묻는다.
ex) 일반적인경우
2개의 원에 둘러쌓인 시작점, 2개의 원에 둘러쌓인 도착점.
시작점에서 2개의 원을 이탈, 도착점에 도달하기위해 2개의 원에 진입.
* 다른 행성들이 어떻든 상관없다. 문제에서 묻지않았다.
3)  겹칠경우, 교차할경우는 문제에서 제외하므로 추가적으로 예외처리를 해줄 필요가 없다.

** 한가지 더, 만약 한 원안에 시작점과 도착점이 모두 포함되어있을경우는? 제외해줘야한다.
즉, 하나의 행성범위안에, 시작점,도착점이 모두 같이있다면 진입/이탈 횟수를 계산해줄 필요가 없다.
진입/이탈 횟수를 계산해줄 필요가 없는경우는,
1) 시작점, 도착점 두점 모두 원 밖에 있을때. (어떤 행성계에도 포함되어있지 않을때)

2) 시작점, 도착점 두점 모두 원 안에 있을때. ( 두 지점 모두 같은 행성계 내에 있을때)

*/
#include<stdio.h>

int main() {
    int T, n;// 테스트 케이스의 개수 T, 행성계의 개수 n
    int i, j;//진입및 이탈 횟수
    int x1, x2, y1, y2;//출발점 (x1, y1)과 도착점 (x2, y2)
    int x, y, r; //원 중심으로 부터 r값이 클경우 원밖에 겹치고 r값이 작을 경우 원안쪽으로 겹치며 같을경우 일치 한다 
    int total;
    int count;

    scanf("%d", &T);
    //i가 입력값보다 작을때 까지 반복 total 값을 0으로 초기화 하고  x1, x2, y1, y2,n값 입력
    for (i = 0; i < T; i++) {
        total = 0;
        scanf("%d %d %d %d", &x1, &y1, &x2, &y2);
        scanf("%d", &n);
        //입력한 n 값보다 j가 작을때  count는 0으로 초기화 하고 x,y,r 값 입력 
        for (j = 0; j < n; j++) {
            count = 0;
            scanf("%d %d %d", &x, &y, &r);
            ///원 중심으로 부터 r값이 클경우 원밖에 겹치고 r값이 작을 경우 원안쪽으로 겹치며 같을경우 일치 한다 
            if ((x - x1) * (x - x1) + (y - y1) * (y - y1) < r * r) {
                count++;
            }
            if ((x - x2) * (x - x2) + (y - y2) * (y - y2) < r * r) {
                count++;
            }
            if (count == 1) {
                total++;
            }

        }
        printf("%d\n", total);
    }
    return 0;
}



